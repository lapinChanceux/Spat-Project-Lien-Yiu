<footer>
    <div class="container">
        <div class="row">
            <!-- Brand Section -->
            <div class="col-12 col-sm-6 col-md-3 col-lg-4 footer-section">
                <h5>About Us</h5>
                <p>Lien Yiu Battery & Tyre Sdn Bhd has been serving customers since 1978 with quality services and
                    reliable products.</p>
            </div>
            <!-- Menu Section -->
            <div class="col-4 col-sm-6 col-md-3 col-lg-2 footer-section">
                <h5>Menu</h5>
                <ul>
                    <li><a href="index.php?page=home#home-section"">Home</a></li>
                    <li><a href="index.php?page=home#about-section">About</a></li>
                    <li><a href="index.php?page=home#appointment-section">Appointment</a></li>
                    <li><a href="index.php?page=home#services-section">Services</a></li>
                </ul>
            </div>
            <!-- Contact Section -->
            <div class="col-8 col-sm-6 col-md-3 col-lg-3 footer-section">
                <h5>Contact Us</h5>
                <p>Email: contact@lienyiu.com</p>
                <p>Phone: +60 4-657 2598</p>
                <p>Social Media: <i class="bi bi-facebook"></i> <i class="bi bi-instagram"></i></p>
            </div>
            <!-- Visitor Count Section -->
            <div class="col-12 col-sm-6 col-md-3 col-lg-2 footer-section">
                <h5>Visitor Count</h5>
                <span id="visitor-count" style="font-size: 20px; font-weight: bold;">0</span>

            </div>
        </div>

        <div class="footer-bottom text-center">
            <hr>
            <small>&copy; 2024 Lien Yiu Battery & Tyre Sdn Bhd. All rights reserved. | Developed & Design by ..</small>
        </div>
    </div>
</footer>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carBrandSelect = document.getElementById('carBrand');
        const carModelSelect = document.getElementById('carModel');

        carBrandSelect.addEventListener('change', function () {
            const brandId = this.value;

            // Clear the car model dropdown
            carModelSelect.innerHTML = '<option selected disabled>Select Car Model</option>';

            // Get models for the selected brand
            const models = carData.models[brandId] || [];

            // Populate the car model dropdown
            models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.model_id;
                option.textContent = model.model_name;
                carModelSelect.appendChild(option);
            });
        });
    });

    function showBookingModal() {
        var bookingModal = new bootstrap.Modal(document.getElementById('bookingModal'));
        bookingModal.show();
    }

    document.addEventListener("DOMContentLoaded", function () {
        const togglePassword = document.querySelector("#togglePassword");
        const passwordField = document.querySelector("#password");

        togglePassword.addEventListener("click", function () {
            // Toggle the type attribute
            const type = passwordField.getAttribute("type") === "password" ? "text" : "password";
            passwordField.setAttribute("type", type);

            // Toggle the icon class
            this.querySelector("i").classList.toggle("bi-eye-fill");
            this.querySelector("i").classList.toggle("bi-eye-slash-fill");
        });
    });


    document.addEventListener('DOMContentLoaded', function () {
        const cancelButton = document.getElementById('cancelButton');
        const checkboxConfirmation = document.getElementById('checkboxConfirmation');
        const confirmCheckbox = document.getElementById('confirmCheckbox');
        const confirmCancel = document.getElementById('confirmCancel');
        const appointmentIdInput = document.getElementById('appointmentIdInput'); // Hidden input in the form

        // Show checkbox and confirmation button when "Cancel Appointment" is clicked
        cancelButton.addEventListener('click', function () {
            cancelButton.classList.add('d-none'); // Hide the "Cancel Appointment" button
            checkboxConfirmation.classList.remove('d-none'); // Show the confirmation section

            // Populate the hidden input with the appointment ID
            const appointmentId = document.getElementById('confirmationModalId').textContent;
            appointmentIdInput.value = appointmentId;
        });

        // Enable the "Confirm Cancellation" button only when the checkbox is checked
        confirmCheckbox.addEventListener('change', function () {
            confirmCancel.disabled = !confirmCheckbox.checked;
        });

        // Handle the confirmation action when "Confirm Cancellation" is clicked
        confirmCancel.addEventListener('click', function () {
            // Submit the form to cancel the appointment
            document.getElementById('cancelAppointmentForm').submit();
        });
    });

    // Function to animate the visitor count
    function animateVisitorCount(targetCount) {
        const countElement = document.getElementById('visitor-count');
        const currentCount = parseInt(countElement.textContent, 10) || 0;
        const duration = 500; // Duration of animation in milliseconds
        const steps = 50; // Number of animation steps
        const increment = (targetCount - currentCount) / steps;
        let currentStep = 0;

        const interval = setInterval(() => {
            currentStep++;
            const newCount = Math.round(currentCount + increment * currentStep);
            countElement.textContent = newCount;

            // Stop animation when target is reached
            if (currentStep >= steps) {
                clearInterval(interval);
                countElement.textContent = targetCount; // Ensure final count is exact
            }
        }, duration / steps);
    }

    // Visitor count from the server
    const visitorCountFromServer = <?php echo htmlspecialchars($visitorCount, ENT_QUOTES, 'UTF-8'); ?>;

    // Observer to detect when the visitor count element is in the viewport
    const countElement = document.getElementById('visitor-count');
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    // Start the animation when the element is in the viewport
                    animateVisitorCount(visitorCountFromServer);
                    // Unobserve the element to prevent repeated animations
                    observer.unobserve(countElement);
                }
            });
        },
        { threshold: 0.1 } // Trigger when 10% of the element is visible
    );

    // Observe the visitor count element
    observer.observe(countElement);



    document.getElementById('searchBox').addEventListener('keyup', filterAndSortAppointments);
    document.getElementById('sortBy').addEventListener('change', filterAndSortAppointments);

    function filterAndSortAppointments() {
        const searchValue = document.getElementById('searchBox').value.toLowerCase();
        const sortByValue = document.getElementById('sortBy').value;

        // Get all rows in the table
        const tableRows = document.querySelectorAll('.appointment-table tbody tr');

        tableRows.forEach(row => {
            const columns = row.querySelectorAll('td');
            const rowText = Array.from(columns).map(col => col.textContent.toLowerCase()).join(' ');

            // Check if the row matches the search query
            const matchesSearch = rowText.includes(searchValue);

            // Check if the row matches the sort filter (if selected)
            const statusColumnIndex = 8; // Adjust if the "Status" column index changes
            const matchesSort = sortByValue === '' || columns[statusColumnIndex]?.textContent.trim().toLowerCase() === sortByValue.toLowerCase();

            // Show or hide the row based on the conditions
            row.style.display = matchesSearch && matchesSort ? '' : 'none';
        });
    }


    // Pagination
    document.addEventListener('DOMContentLoaded', function () {
        const rowsPerPage = 5; // Number of rows per page
        const table = document.getElementById('appointmentTable');
        const paginationControls = document.getElementById('paginationControls');
        const rows = Array.from(table.querySelectorAll('tbody tr')); // Convert NodeList to Array
        let filteredRows = rows; // Default to all rows
        let totalPages = Math.ceil(filteredRows.length / rowsPerPage);

        // Function to show rows for the current page
        function showPage(page) {
            const start = (page - 1) * rowsPerPage;
            const end = page * rowsPerPage;
            filteredRows.forEach((row, index) => {
                row.style.display = (index >= start && index < end) ? '' : 'none';
            });
        }

        // Function to create pagination controls with active button highlighting
        function setupPagination() {
            paginationControls.innerHTML = ''; // Clear previous pagination buttons

            // Create Left Arrow Button
            const leftArrow = document.createElement('button');
            leftArrow.innerHTML = '&laquo;'; // HTML entity for left arrow
            leftArrow.classList.add('btn', 'btn-primary', 'mx-1', 'pagination-button');
            leftArrow.addEventListener('click', () => {
                const activePage = getActivePage();
                if (activePage > 1) {
                    showPage(activePage - 1);
                    setActiveButton(activePage - 1);
                }
            });
            paginationControls.appendChild(leftArrow);

            // Create Numbered Pagination Buttons
            for (let i = 1; i <= totalPages; i++) {
                const button = document.createElement('button');
                button.textContent = i;
                button.classList.add('btn', 'btn-primary', 'mx-1', 'pagination-button');
                button.addEventListener('click', () => {
                    showPage(i);
                    setActiveButton(i);
                });
                paginationControls.appendChild(button);
            }

            // Create Right Arrow Button
            const rightArrow = document.createElement('button');
            rightArrow.innerHTML = '&raquo;'; // HTML entity for right arrow
            rightArrow.classList.add('btn', 'btn-primary', 'mx-1', 'pagination-button');
            rightArrow.addEventListener('click', () => {
                const activePage = getActivePage();
                if (activePage < totalPages) {
                    showPage(activePage + 1);
                    setActiveButton(activePage + 1);
                }
            });
            paginationControls.appendChild(rightArrow);
        }

        // Function to get the current active page
        function getActivePage() {
            const buttons = paginationControls.getElementsByClassName('pagination-button');
            for (let i = 0; i < buttons.length; i++) {
                if (buttons[i].classList.contains('active')) {
                    return parseInt(buttons[i].textContent);
                }
            }
            return 1; // Default to first page if no active button
        }

        // Function to set the active page button
        function setActiveButton(activePage) {
            const buttons = paginationControls.getElementsByClassName('pagination-button');
            Array.from(buttons).forEach((button) => {
                const buttonPage = parseInt(button.textContent);
                button.classList.toggle('active', buttonPage === activePage);
            });
        }

        // Initialize pagination
        function initPagination() {
            totalPages = Math.ceil(filteredRows.length / rowsPerPage); // Recalculate total pages
            if (filteredRows.length > 0) {
                showPage(1); // Show the first page by default
                setupPagination();
                setActiveButton(1); // Set the first page as active
            } else {
                paginationControls.innerHTML = '<p>No records to display</p>';
            }
        }

        // Filter functionality with pagination update
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', function () {
                const status = this.getAttribute('data-status');
                filteredRows = rows.filter(row => {
                    const rowStatus = row.getAttribute('data-status');
                    return status === "" || rowStatus === status;
                });

                // Update pagination after filtering
                initPagination();
            });
        });

        // Show all records and apply pagination on initial page load
        initPagination();
    });
    document.addEventListener("DOMContentLoaded", function () {
        const navLinks = document.querySelectorAll(".nav-link");

        navLinks.forEach(link => {
            link.addEventListener("click", function (event) {
                const status = this.getAttribute("data-status");
                if (status) {
                    // Filter the table rows by status
                    const rows = document.querySelectorAll("#appointmentTable tbody tr");
                    rows.forEach(row => {
                        const rowStatus = row.getAttribute("data-status");
                        row.style.display = (rowStatus === status || status === "") ? "" : "none";
                    });
                }
            });
        });
    });

</script>
<script>
    const carData = {
        brands: <?= json_encode($carBrands) ?>,
        models: <?= json_encode($allCarModels) ?>
    };
</script>
<script src="Views/js/script.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>


</body>
</html>
